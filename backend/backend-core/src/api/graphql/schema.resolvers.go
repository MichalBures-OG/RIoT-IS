package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"bp-bures-SfPDfSD/src/api/graphql/generated"
	"bp-bures-SfPDfSD/src/api/graphql/model"
	"bp-bures-SfPDfSD/src/mapping/api2dto"
	"bp-bures-SfPDfSD/src/mapping/dto2api"
	"context"
	"strconv"

	"github.com/thoas/go-funk"
)

// CreateNewDeviceType is the resolver for the createNewDeviceType field.
func (r *mutationResolver) CreateNewDeviceType(_ context.Context, input model.NewDeviceTypeInput) (*model.DeviceType, error) {

	deviceTypeDTOFromInput := api2dto.MapNewDeviceTypeInputToDeviceTypeDTO(input)
	id, err := r.rdbClient.InsertDeviceType(deviceTypeDTOFromInput)
	if err != nil {
		return nil, err
	}

	deviceTypeDTO, err := r.rdbClient.ObtainDeviceTypeByID(id)
	if err != nil {
		return nil, err
	}

	return dto2api.MapDeviceTypeDTOToDeviceType(deviceTypeDTO)
}

// DeleteDeviceType is the resolver for the deleteDeviceType field.
func (r *mutationResolver) DeleteDeviceType(_ context.Context, input string) (*bool, error) {

	id, err := strconv.ParseInt(input, 10, 32)
	if err != nil {
		return nil, err
	}

	if err := r.rdbClient.DeleteDeviceType(uint32(id)); err != nil {
		return nil, err
	}

	result := true
	return &result, nil
}

// UpdateDeviceName is the resolver for the updateDeviceName field.
func (r *mutationResolver) UpdateDeviceName(_ context.Context, id string, newName string) (*model.Device, error) {

	idAsInteger, err := strconv.ParseInt(id, 10, 32)
	if err != nil {
		return nil, err
	}

	deviceDTO, err := r.rdbClient.ObtainDeviceByID(uint32(idAsInteger))
	if err != nil {
		return nil, err
	}

	deviceDTO.Name = newName

	_, err = r.rdbClient.InsertOrUpdateDevice(deviceDTO)
	if err != nil {
		return nil, err
	}

	return dto2api.MapDeviceDTOToDevice(deviceDTO), nil
}

// SingleDeviceType is the resolver for the singleDeviceType field.
func (r *queryResolver) SingleDeviceType(ctx context.Context, input string) (*model.DeviceType, error) {
	id, err := strconv.ParseInt(input, 10, 32)
	if err != nil {
		return nil, err
	}

	deviceTypeDTO, err := r.rdbClient.ObtainDeviceTypeByID(uint32(id))
	if err != nil {
		return nil, err
	}

	return dto2api.MapDeviceTypeDTOToDeviceType(deviceTypeDTO)
}

// DeviceTypes is the resolver for the deviceTypes field.
func (r *queryResolver) DeviceTypes(_ context.Context) ([]*model.DeviceType, error) {

	deviceTypeDTOs, err := r.rdbClient.ObtainAllDeviceTypes()
	if err != nil {
		return nil, err
	}

	return dto2api.MapDeviceTypeDTOsToDeviceTypes(deviceTypeDTOs)
}

// Devices is the resolver for the devices field.
func (r *queryResolver) Devices(_ context.Context) ([]*model.Device, error) {

	deviceDTOs, err := r.rdbClient.ObtainAllDevices()
	if err != nil {
		return nil, err
	}

	return funk.Map(deviceDTOs, dto2api.MapDeviceDTOToDevice).([]*model.Device), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
