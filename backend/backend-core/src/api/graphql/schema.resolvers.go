package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/MichalBures-OG/bp-bures-SfPDfSD-backend-core/src/api/graphql/generated"
	"github.com/MichalBures-OG/bp-bures-SfPDfSD-backend-core/src/api/graphql/model"
)

// CreateSDType is the resolver for the createSDType field.
func (r *mutationResolver) CreateSDType(ctx context.Context, input model.SDTypeInput) (*model.SDType, error) {
	panic(fmt.Errorf("not implemented: CreateSDType - createSDType"))
}

// DeleteSDType is the resolver for the deleteSDType field.
func (r *mutationResolver) DeleteSDType(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSDType - deleteSDType"))
}

// UpdateSDInstance is the resolver for the updateSDInstance field.
func (r *mutationResolver) UpdateSDInstance(ctx context.Context, id string, newUserIdentifier string) (*model.SDInstance, error) {
	panic(fmt.Errorf("not implemented: UpdateSDInstance - updateSDInstance"))
}

// SdType is the resolver for the sdType field.
func (r *queryResolver) SdType(ctx context.Context, id string) (*model.SDType, error) {
	panic(fmt.Errorf("not implemented: SdType - sdType"))
}

// SdTypes is the resolver for the sdTypes field.
func (r *queryResolver) SdTypes(ctx context.Context) ([]*model.SDType, error) {
	panic(fmt.Errorf("not implemented: SdTypes - sdTypes"))
}

// SdInstances is the resolver for the sdInstances field.
func (r *queryResolver) SdInstances(ctx context.Context) ([]*model.SDInstance, error) {
	panic(fmt.Errorf("not implemented: SdInstances - sdInstances"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
