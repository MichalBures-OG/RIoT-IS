// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type Query struct {
}

type SDInstance struct {
	ID             string  `json:"id"`
	UID            string  `json:"uid"`
	UserIdentifier string  `json:"userIdentifier"`
	Type           *SDType `json:"type"`
}

type SDParameter struct {
	ID         string          `json:"id"`
	Denotation string          `json:"denotation"`
	Type       SDParameterType `json:"type"`
}

type SDParameterInput struct {
	Denotation string          `json:"denotation"`
	Type       SDParameterType `json:"type"`
}

type SDType struct {
	ID         string         `json:"id"`
	Denotation string         `json:"denotation"`
	Parameters []*SDParameter `json:"parameters"`
}

type SDTypeInput struct {
	Denotation string              `json:"denotation"`
	Parameters []*SDParameterInput `json:"parameters"`
}

type SDParameterType string

const (
	SDParameterTypeString  SDParameterType = "STRING"
	SDParameterTypeNumber  SDParameterType = "NUMBER"
	SDParameterTypeBoolean SDParameterType = "BOOLEAN"
)

var AllSDParameterType = []SDParameterType{
	SDParameterTypeString,
	SDParameterTypeNumber,
	SDParameterTypeBoolean,
}

func (e SDParameterType) IsValid() bool {
	switch e {
	case SDParameterTypeString, SDParameterTypeNumber, SDParameterTypeBoolean:
		return true
	}
	return false
}

func (e SDParameterType) String() string {
	return string(e)
}

func (e *SDParameterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SDParameterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SDParameterType", str)
	}
	return nil
}

func (e SDParameterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
