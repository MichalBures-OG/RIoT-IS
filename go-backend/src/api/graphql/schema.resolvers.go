package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"bp-bures-SfPDfSD/src/api/graphql/generated"
	"bp-bures-SfPDfSD/src/api/graphql/model"
	"context"
	"fmt"
	"strconv"
)

// CreateNewUserDefinedDeviceType is the resolver for the createNewUserDefinedDeviceType field.
func (r *mutationResolver) CreateNewUserDefinedDeviceType(ctx context.Context, input model.NewUserDefinedDeviceTypeInput) (*model.UserDefinedDeviceType, error) {

	panic(fmt.Errorf("not implemented"))
}

// SingleUserDefinedDeviceType is the resolver for the singleUserDefinedDeviceType field.
func (r *queryResolver) SingleUserDefinedDeviceType(_ context.Context, input string) (*model.UserDefinedDeviceType, error) {

	id, err := strconv.ParseInt(input, 10, 32)
	if err != nil {
		return nil, err
	}

	userDefinedDeviceTypeEntity, err := r.rdbClient.ObtainUserDefinedDeviceTypeByID(uint32(id))
	if err != nil {
		return nil, err
	}

	return mapUserDefinedDeviceTypeEntityToUserDefinedDeviceType(userDefinedDeviceTypeEntity)
}

// UserDefinedDeviceTypes is the resolver for the userDefinedDeviceTypes field.
func (r *queryResolver) UserDefinedDeviceTypes(_ context.Context) ([]*model.UserDefinedDeviceType, error) {

	userDefinedDeviceTypeEntities, err := r.rdbClient.ObtainAllUserDefinedDeviceTypes()
	if err != nil {
		return nil, err
	}

	return mapUserDefinedDeviceTypeEntitiesToUserDefinedDeviceTypes(userDefinedDeviceTypeEntities)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
