// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Device struct {
	ID   string      `json:"id"`
	UID  string      `json:"uid"`
	Name string      `json:"name"`
	Type *DeviceType `json:"type"`
}

type DeviceType struct {
	ID         string                 `json:"id"`
	Denotation string                 `json:"denotation"`
	Parameters []*DeviceTypeParameter `json:"parameters"`
}

type DeviceTypeParameter struct {
	ID   string                  `json:"id"`
	Name string                  `json:"name"`
	Type DeviceTypeParameterType `json:"type"`
}

type DeviceTypeParameterInput struct {
	Name string                  `json:"name"`
	Type DeviceTypeParameterType `json:"type"`
}

type NewDeviceTypeInput struct {
	Denotation string                      `json:"denotation"`
	Parameters []*DeviceTypeParameterInput `json:"parameters"`
}

type DeviceTypeParameterType string

const (
	DeviceTypeParameterTypeString  DeviceTypeParameterType = "STRING"
	DeviceTypeParameterTypeNumber  DeviceTypeParameterType = "NUMBER"
	DeviceTypeParameterTypeBoolean DeviceTypeParameterType = "BOOLEAN"
)

var AllDeviceTypeParameterType = []DeviceTypeParameterType{
	DeviceTypeParameterTypeString,
	DeviceTypeParameterTypeNumber,
	DeviceTypeParameterTypeBoolean,
}

func (e DeviceTypeParameterType) IsValid() bool {
	switch e {
	case DeviceTypeParameterTypeString, DeviceTypeParameterTypeNumber, DeviceTypeParameterTypeBoolean:
		return true
	}
	return false
}

func (e DeviceTypeParameterType) String() string {
	return string(e)
}

func (e *DeviceTypeParameterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceTypeParameterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceTypeParameterType", str)
	}
	return nil
}

func (e DeviceTypeParameterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
